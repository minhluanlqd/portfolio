{"version":3,"sources":["components/LandingPage/landingpage.js","components/main.js","containers/App.js","serviceWorker.js","index.js","assets/images/MyAvatar.png"],"names":["LandingPage","style","margin","width","className","col","src","avatar","alt","href","rel","target","aria-hidden","icon","leetcodeIcon","color","fontSize","padding","Component","Contact","React","lazy","AboutMe","Projects","Resume","Main","exact","path","component","render","fallback","App","title","textDecoration","to","scroll","Boolean","window","location","hostname","match","ReactDOM","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"wQA8CeA,E,uKApCP,OACI,yBAAKC,MAAO,CAACC,OAAQ,OAAQC,MAAO,SAChC,kBAAC,OAAD,CAAMC,UAAU,gBACZ,kBAAC,OAAD,CAAMC,IAAK,IACP,yBAAKC,IAAKC,IAAQC,IAAI,SAASJ,UAAU,eACzC,yBAAKA,UAAU,eACX,6FACA,6BAEA,0HAEA,yBAAKA,UAAU,gBAEX,uBAAGK,KAAK,4CAA4CC,IAAI,sBAAsBC,OAAO,UACjF,uBAAGP,UAAU,wBAAwBQ,cAAY,UAIrD,uBAAGH,KAAK,iCAAiCC,IAAI,sBAAsBC,OAAO,UACtE,uBAAGP,UAAU,sBAAsBQ,cAAY,UAInD,uBAAGH,KAAK,kCAAkCC,IAAI,sBAAsBC,OAAO,UACvE,kBAAC,OAAD,CAAME,KAAMC,IAAcb,MAAO,CAACc,MAAO,QAASC,SAAU,MAAOC,QAAS,mB,GA3BtFC,aCHpBC,EAAUC,IAAMC,MAAK,kBAAM,iCAC3BC,EAAUF,IAAMC,MAAK,kBAAM,iCAC3BE,EAAWH,IAAMC,MAAK,kBAAM,iCAC5BG,EAASJ,IAAMC,MAAK,kBAAM,uDAwCjBI,EAtCF,kBACT,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW5B,IACjC,kBAAC,IAAD,CACI2B,KAAK,WACLE,OAAQ,kBACJ,kBAAC,WAAD,CAAUC,SAAU,6CACpB,kBAACR,EAAD,UAIR,kBAAC,IAAD,CACIK,KAAK,WACLE,OAAQ,kBACJ,kBAAC,WAAD,CAAUC,SAAU,6CACpB,kBAACX,EAAD,UAIR,kBAAC,IAAD,CACIQ,KAAK,UACLE,OAAQ,kBACJ,kBAAC,WAAD,CAAUC,SAAU,6CACpB,kBAACN,EAAD,UAIR,kBAAC,IAAD,CACIG,KAAK,YACLE,OAAQ,kBACJ,kBAAC,WAAD,CAAUC,SAAU,6CACpB,kBAACP,EAAD,Y,OCFDQ,E,uKA9BX,OACE,yBAAK3B,UAAU,oBACjB,kBAAC,SAAD,KACI,kBAAC,SAAD,CAAQA,UAAU,eAAe4B,MAAO,kBAAC,IAAD,CAAM/B,MAAO,CAACgC,eAAgB,OAAQlB,MAAO,SAAUmB,GAAG,KAA1D,eAAkFC,QAAM,GAC5H,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAMD,GAAG,WAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,aAGR,kBAAC,SAAD,CAAQF,MAAO,kBAAC,IAAD,CAAM/B,MAAO,CAACgC,eAAgB,OAAQlB,MAAO,SAAUmB,GAAG,KAA1D,gBACX,kBAAC,aAAD,KACE,kBAAC,IAAD,CAAMA,GAAG,WAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,aAGN,kBAAC,UAAD,KACI,yBAAK9B,UAAU,iBACf,kBAAC,EAAD,a,GAvBMc,aCMEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,cCTNC,IAASZ,OACP,kBAAC,IAAD,CAAea,SAAS,KACtB,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.41799035.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Grid, Cell} from 'react-mdl';\nimport avatar from '../../assets/images/MyAvatar.png';\nimport {Icon} from '@iconify/react';\nimport leetcodeIcon from '@iconify/icons-simple-icons/leetcode';\n\n\nclass LandingPage extends Component{\n\n    render(){\n        return(\n            <div style={{margin: 'auto', width: '100%'}}>\n                <Grid className=\"landing-grid\">\n                    <Cell col={12}>\n                        <img src={avatar} alt=\"Avatar\" className=\"avatar-img\"/>\n                        <div className=\"banner-text\">\n                            <h1>Software Engineer with incredible passion on Machine Learning</h1>\n                            <hr/>\n\n                            <p>HTML/CSS/JavaScript | ReactJS/Redux/Hooks | Android | Python | Neuron Network-Deep Learning</p>\n\n                            <div className=\"social-links\">\n                            {/* LinkedIn */}\n                                <a href=\"https://www.linkedin.com/in/luanminhtran/\" rel=\"noopener noreferrer\" target=\"_blank\">\n                                    <i className=\"fa fa-linkedin-square\" aria-hidden=\"true\"/>\n                                </a>\n\n                            {/* GitHub */}\n                                <a href=\"https://github.com/minhluanlqd\" rel=\"noopener noreferrer\" target=\"_blank\">\n                                    <i className=\"fa fa-github-square\" aria-hidden=\"true\"/>\n                                </a>\n\n                            {/* LinkedIn */}\n                                <a href=\"https://leetcode.com/luan_tran/\" rel=\"noopener noreferrer\" target=\"_blank\">\n                                    <Icon icon={leetcodeIcon} style={{color: 'white', fontSize: '5em', padding: '8px'}}/>\n                                </a>\n                            </div>\n                        </div>\n                    </Cell>\n                </Grid>\n            </div>\n        )\n    }\n\n}\n\nexport default LandingPage;","import React, {Suspense} from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport LandingPage from '../components/LandingPage/landingpage';\n\nconst Contact = React.lazy(() => import('../components/Contact/contact'));\nconst AboutMe = React.lazy(() => import('../components/AboutMe/aboutme'));\nconst Projects = React.lazy(() => import('../components/Projects/projects'));\nconst Resume = React.lazy(() => import('../components/Resume/resume'))\n\nconst Main = () => (\n    <Switch>\n        <Route exact path=\"/\" component={LandingPage}/>\n        <Route \n            path=\"/aboutme\" \n            render={() => (\n                <Suspense fallback={<div>Loading ...</div>}>\n                <AboutMe/>\n                </Suspense>\n            )}\n        />\n        <Route \n            path=\"/contact\" \n            render={() => (\n                <Suspense fallback={<div>Loading ...</div>}>\n                <Contact/>\n                </Suspense>\n            )}\n        />\n        <Route \n            path=\"/resume\" \n            render={() => (\n                <Suspense fallback={<div>Loading ...</div>}>\n                <Resume/>\n                </Suspense>\n            )}\n        />\n        <Route \n            path=\"/projects\" \n            render={() => (\n                <Suspense fallback={<div>Loading ...</div>}>\n                <Projects/>\n                </Suspense>\n            )}\n        />\n    </Switch>\n)\n\nexport default Main;","import React, { Component } from 'react';\nimport './App.css';\nimport { Layout, Header, Navigation, Drawer, Content } from 'react-mdl';\nimport Main from '../components/main';\nimport { Link } from 'react-router-dom';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"demo-big-content\">\n    <Layout>\n        <Header className=\"header-color\" title={<Link style={{textDecoration: 'none', color: 'white'}} to=\"/\">MyPortfolio</Link>} scroll>\n            <Navigation>\n                <Link to=\"/resume\">Resume</Link>\n                <Link to=\"/aboutme\">About Me</Link>\n                <Link to=\"/projects\">Projects</Link>\n                <Link to=\"/contact\">Contact</Link>\n            </Navigation>\n        </Header>\n        <Drawer title={<Link style={{textDecoration: 'none', color: 'black'}} to=\"/\">MyPortfolio</Link>}>\n            <Navigation>\n              <Link to=\"/resume\">Resume</Link>\n              <Link to=\"/aboutme\">About Me</Link>\n              <Link to=\"/projects\">Projects</Link>\n              <Link to=\"/contact\">Contact</Link>\n            </Navigation>\n        </Drawer>\n        <Content>\n            <div className=\"page-content\" />\n            <Main/>\n        </Content>\n    </Layout>\n</div>\n\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/containers/App';\nimport {BrowserRouter} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\n\nReactDOM.render(\n  <BrowserRouter basename=\"/\">\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/MyAvatar.c433a087.png\";"],"sourceRoot":""}